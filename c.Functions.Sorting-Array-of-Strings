#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// sort the strings in lexicographically non-decreasing order
int lexicographic_sort(const char* a, const char* b) {
    int len_a = strlen(a);
    int len_b = strlen(b);
    
    int result = 0;
    
    for (int i=0; ((i<len_a) && (i<len_b)); i++){
        if (a[i] < b[i]){
            return 1;
        } else if (a[i] == b[i]){
            //continue to check for next chars
        } else {
            return -1;
        }
    }
    
    //both strings have same set of initial characters
    if (len_a > len_b){
        return -1;
    }else if (len_a < len_b){
        return 1;
    }
    
    return 0;
}

// to sort the strings in lexicographically non-increasing order.
int lexicographic_sort_reverse(const char* a, const char* b) {
    return ((-1)* (lexicographic_sort(a, b)));
}

/*
count the number of distinct characters in the string
*/
int count_of_distinct_chars(const char* s){
    int count = 0;
    int len = strlen(s);
    
    const int TOTAL_ALPHABETS = 26;
    int alphabets[TOTAL_ALPHABETS];
    //init the above array
    for (int i=0; i<TOTAL_ALPHABETS; i++){
        alphabets[i] = 0;
    }
    
    //set to 1 the char index of above array if corresponding alphabet is present in string
    for (int i=0; i<len; i++){
        alphabets[s[i] - 'a'] = 1;
    }
    
    //add up the values of the array
    for (int i=0; i<TOTAL_ALPHABETS; i++){
        count += alphabets[i];
    }
    
    return count;
}

/*
to sort the strings in non-decreasing order of the number of distinct characters present in them. If two strings have the same number of distinct characters present in them, then the lexicographically smaller string should appear first.
*/
int sort_by_number_of_distinct_characters(const char* a, const char* b) {
    int distinct_a = count_of_distinct_chars(a);
    int distinct_b = count_of_distinct_chars(b);
    
    if (distinct_a > distinct_b){
        return -1;
    }else if (distinct_a < distinct_b){
        return 1;
    }else{
        return lexicographic_sort(a, b);
    }
}

// to sort the strings in non-decreasing order of their lengths. If two strings have the same length, then the lexicographically smaller string should appear first.
int sort_by_length(const char* a, const char* b) {
    int len_a = strlen(a);
    int len_b = strlen(b);
    
    if (len_a > len_b){
        return -1;
    }else if (len_a < len_b){
        return 1;
    }else{
        return lexicographic_sort(a, b);
    }
}

/**
copy b to a
*/
void my_strcpy(char* a, char* b){
    a = (char*)(realloc(a, (sizeof(char) * (strlen(b)+1))));
    for (int i=0; i<strlen(b); i++){
        *(a+i) = *(b+i);
    }
    *(a+strlen(b)) = '\0';
}

void swap_strings(char* a, char* b){
    char* temp = (char*)(malloc((strlen(a)+1)*sizeof(char)));
    my_strcpy(temp, a);
    //printf("debug: entered swap(); a=%s; b=%s; temp=%s\n",a, b, temp);
    my_strcpy(a, b);
    my_strcpy(b, temp);
    //printf("debug: leaving swap(); a=%s; b=%s; temp=%s\n",a, b, temp);
}

void string_sort(char** arr,const int len,int (*cmp_func)(const char* a, const char* b)){
    /*
    use bubble sort
    */
    if (len <= 1){
        return;
    }
    int len1 = len;
    
    for (int i=0; i<(len1-1); i++){
        for (int j=0; j<(len1-i-1); j++){
            int result = cmp_func(arr[j], arr[j+1]);
            //printf("debug: i=%d, j=%d, arr[j]=%s, arr[j+1]=%s, result=%d\n", i, j, arr[j], arr[j+1], result);
            if (result < 0){
                //printf("debug: before calling swap(); arr[%d]=%s; arr[%d]=%s\n",j, arr[j], (j+1), arr[j+1]);
                swap_strings(arr[j], arr[j+1]);
                //printf("debug: after calling swap(); arr[%d]=%s; arr[%d]=%s\n",j, arr[j], (j+1), arr[j+1]);
            }
        }
    }
}




int main() 
{
    int n;
    scanf("%d", &n);
  
    char** arr;
	arr = (char**)malloc(n * sizeof(char*));
  
    for(int i = 0; i < n; i++){
        *(arr + i) = malloc(1024 * sizeof(char));
        scanf("%s", *(arr + i));
        *(arr + i) = realloc(*(arr + i), strlen(*(arr + i)) + 1);
    }
  
    string_sort(arr, n, lexicographic_sort);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]);
    printf("\n");

    string_sort(arr, n, lexicographic_sort_reverse);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]); 
    printf("\n");

    string_sort(arr, n, sort_by_length);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]);    
    printf("\n");

    string_sort(arr, n, sort_by_number_of_distinct_characters);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]); 
    printf("\n");
}
