#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
copy b to a
*/
void my_strcpy(char* a, char* b){
    a = (char*)(realloc(a, (sizeof(char) * (strlen(b)+1))));
    for (int i=0; i<strlen(b); i++){
        *(a+i) = *(b+i);
    }
    *(a+strlen(b)) = '\0';
}

void swap_strings(char* a, char* b){
    char* temp = (char*)(malloc((strlen(a)+1)*sizeof(char)));

    my_strcpy(temp, a);
    //printf("debug: entered swap(); a=%s; b=%s; temp=%s\n",a, b, temp);
    my_strcpy(a, b);
    my_strcpy(b, temp);
    //printf("debug: leaving swap(); a=%s; b=%s; temp=%s\n",a, b, temp);
}

/**
return 
  -1 if s1 < s2
  0     s1 == s2
  +1    s1 > s2
  
assumption:
 len(s1) > 0 
 &&
 len(s2) > 0
 compare the strings in lexicographically non-decreasing order
*/
int lexicographic_compare(const char* a, const char* b) {
    //printf("debug: in lexicographic compare: %s %s", a, b);
    int len_a = strlen(a);
    int len_b = strlen(b);
    
    int result = 0;
    
    for (int i=0; ((i<len_a) && (i<len_b)); i++){
        //printf("debug:i=%d, char1=%c, char2=%c, result=%d", i, a[i], b[i], result);
        if (a[i] < b[i]){
            //printf(" -- less --");
            result = -1;
            break;
        } else if (a[i] == b[i]){
            //printf(" -- same --");
            //continue to check for next chars
        } else {
            //printf(" -- more --");
            result = 1;
            break;
        }
        //printf(" after char checks, result=%d\n", result);
    }
    
    //both strings have same set of initial characters
    if (0 == result){
        if (len_a > len_b){
            result = 1;
        }else if (len_a < len_b){
            result = -1;
        }    
    }
    
    //printf (" result=%d\n", result);
    return result;
}
/**
arr: the array of strings
len: total element count of above array
cmp_func: the comparator function for any two given strings
start_index: the index to start sorting from; 0<=start_index<len
*/
void string_sort(char** arr,const int len,int (*cmp_func)(const char* a, const char* b), int start_index){
    
    /*
    printf("debug: entered string_sort with: len=%d, start_index=%d, arr=[", len, start_index);
    for (int i = 0; i < len; i++)
            printf("%s%s", arr[i], i == len - 1 ? "]\n" : " ");
    */
    /*
    use bubble sort
    */
    if ((len <= 1) || (start_index >= (len-1))){
        return;
    }
    
    for (int i=start_index; i<(len-1); i++){
        for (int j=start_index; j<(len-1-(i-start_index)); j++){
            int result = cmp_func(arr[j], arr[j+1]);
            //printf("debug: i=%d, j=%d, arr[j]=%s, arr[j+1]=%s, result=%d\n", i, j, arr[j], arr[j+1], result);
            if (result > 0){
                //printf("debug: before calling swap(); arr[%d]=%s; arr[%d]=%s\n",j, arr[j], (j+1), arr[j+1]);
                swap_strings(arr[j], arr[j+1]);
                //printf("debug: after calling swap(); arr[%d]=%s; arr[%d]=%s\n",j, arr[j], (j+1), arr[j+1]);
            }
        }
    }
    /* 
    printf("debug: leaving string_sort with: len=%d, start_index=%d, arr=[", len, start_index);
    for (int i = 0; i < len; i++)
            printf("%s%s", arr[i], i == len - 1 ? "]\n" : " ");
    */
}

/**
array in it's state (as passed into the below method) has already been printed
we need to change the state to the next possible permutation
start from the last index and decrement
compare the last 2 strings (s1=s[i] & s2=s[i-1])
if s1 < s2, we have found the next permuation: swap the two strings, return
if s1 == s2, no change and decrement the counter
if s1 > s2, 
*/
int next_permutation(int n, char **s)
{
    /**
    * Complete this method
    * Return 0 when there is no next permutation and 1 otherwise
    * Modify array s to its next permutation
    * Start index from the 2nd last element
    */
    for (int i = n-2; i>=0; i--){
        //printf("debug: in next_permutation i=%d\n", i);
        if (lexicographic_compare(s[i], s[i+1]) == -1){
            /*
            s[i] and s[i+1] are in ascending sequence
            we will need to 
              sort the arr starting at s[i+1], 
              now find k-minimum such that (k>i) and s[i] < s[k]
              swap s[i] with s[k]
            */
            string_sort(s, n, lexicographic_compare, (i+1));
            for (int k=i+1; k<n; k++){
                //printf("debug: k=%d\n", k);
                if (lexicographic_compare(s[i], s[k]) == -1){
                    swap_strings(s[i], s[k]);
                    return 1;
                }
            }
        }
    }
    
    return 0;
}

int main()
{
	char **s;
	int n;
	scanf("%d", &n);
	s = calloc(n, sizeof(char*));
	for (int i = 0; i < n; i++)
	{
		s[i] = calloc(11, sizeof(char));
		scanf("%s", s[i]);
	}
	do
	{
		for (int i = 0; i < n; i++)
			printf("%s%c", s[i], i == n - 1 ? '\n' : ' ');
	} while (next_permutation(n, s));
	for (int i = 0; i < n; i++)
		free(s[i]);
	free(s);
	return 0;
}
