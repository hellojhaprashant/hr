#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
copy b to a
*/
void my_strcpy(char* a, char* b){
    a = (char*)(realloc(a, (sizeof(char) * (strlen(b)+1))));
    for (int i=0; i<strlen(b); i++){
        *(a+i) = *(b+i);
    }
    *(a+strlen(b)) = '\0';
}

void swap_strings(char* a, char* b){
    char* temp = (char*)(malloc((strlen(a)+1)*sizeof(char)));

    my_strcpy(temp, a);
    //printf("debug: entered swap(); a=%s; b=%s; temp=%s\n",a, b, temp);
    my_strcpy(a, b);
    my_strcpy(b, temp);
    //printf("debug: leaving swap(); a=%s; b=%s; temp=%s\n",a, b, temp);
}

/**
return 
  -1 if s1 < s2
  0     s1 == s2
  +1    s1 > s2
  
assumption:
 len(s1) > 0 
 &&
 len(s2) > 0
 sort the strings in lexicographically non-decreasing order
*/
int lexicographic_sort(const char* a, const char* b) {
    int len_a = strlen(a);
    int len_b = strlen(b);
    
    int result = 0;
    
    for (int i=0; ((i<len_a) && (i<len_b)); i++){
        if (a[i] < b[i]){
            return -1;
        } else if (a[i] == b[i]){
            //continue to check for next chars
        } else {
            return 1;
        }
    }
    
    //both strings have same set of initial characters
    if (len_a > len_b){
        return 1;
    }else if (len_a < len_b){
        return -1;
    }
    
    return 0;
}

/**
array in it's state (as passed into the below method) has already been printed
we need to change the state to the next possible permutation
start from the last index and decrement
compare the last 2 strings (s1=s[i] & s2=s[i-1])
if s1 < s2, we have found the next permuation: swap the two strings, return
if s1 == s2, no change and decrement the counter
if s1 > s2, 
*/
int next_permutation(int n, char **s)
{
	/**
	* Complete this method
	* Return 0 when there is no next permutation and 1 otherwise
	* Modify array s to its next permutation
	*/
    for (int i = n-2; i>=0; i--){
        if (lexicographic_sort(s[i], s[i+1]) == -1){
            swap_strings(s[i], s[i+1]);
            return 1;
        }
    }
    
    return 0;
}
int main()
{
	char **s;
	int n;
	scanf("%d", &n);
	s = calloc(n, sizeof(char*));
	for (int i = 0; i < n; i++)
	{
		s[i] = calloc(11, sizeof(char));
		scanf("%s", s[i]);
	}
	do
	{
		for (int i = 0; i < n; i++)
			printf("%s%c", s[i], i == n - 1 ? '\n' : ' ');
	} while (next_permutation(n, s));
	for (int i = 0; i < n; i++)
		free(s[i]);
	free(s);
	return 0;
}
